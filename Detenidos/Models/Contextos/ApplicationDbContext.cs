using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.Extensions.Configuration;
using NetTopologySuite.Geometries;
using Detenidos.Utilidades;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading;
using System.Threading.Tasks;
using Detenidos.Models.Catalogos;

namespace Detenidos.Models
{
    public class ApplicationDbContext : IdentityDbContext
    {
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IConfiguration _configuration;

        public ApplicationDbContext(DbContextOptions options, IHttpContextAccessor httpContextAccessor, IConfiguration configuration) : base(options)
        {
            _httpContextAccessor = httpContextAccessor;
            _configuration = configuration;
        }

        public override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
        {
            List<AuditEntry> auditEntries = OnBeforeSaveChanges();
            int result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
            await OnAfterSaveChanges(auditEntries);
            return result;
        }

        private List<AuditEntry> OnBeforeSaveChanges()
        {
            ChangeTracker.DetectChanges();
            List<AuditEntry> auditEntries = new();
            foreach (EntityEntry entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                string UserIdstr = "";
                bool incorrectLogin = false;
                if (_httpContextAccessor.HttpContext.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier) != null)
                {
                    UserIdstr = _httpContextAccessor.HttpContext.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier).Value;
                }
                else
                {
                    incorrectLogin = true;
                }

                AuditEntry auditEntry = new(entry)
                {
                    //auditEntry.TableName = entry.Metadata.Relational().TableName; // EF Core 3.1: entry.Metadata.GetTableName();
                    TableName = entry.Metadata.GetTableName(),
                    DateTimeEvent = new Utilerias(_configuration).GetFechaServidor(),
                    IP = _httpContextAccessor.HttpContext.Connection.RemoteIpAddress.ToString(),
                    UserId = UserIdstr
                };
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    // The following condition is ok with EF Core 2.2 onwards.
                    // If you are using EF Core 2.1, you may need to change the following condition to support navigation properties: https://github.com/dotnet/efcore/issues/17700
                    // if (property.IsTemporary || (entry.State == EntityState.Added && property.Metadata.IsForeignKey()))
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        if (incorrectLogin) auditEntry.UserId = auditEntry.KeyValues["Id"].ToString();
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            //object propiedad = property.CurrentValue;
                            //if(propiedad.GetType() == typeof(Point) )
                            //{
                            //    Point punto = (Point)propiedad;
                            //    auditEntry.NewValues[propertyName] = new { lat = punto.X, lng = punto.Y};
                            //} else
                            //{
                            //    auditEntry.NewValues[propertyName] = propiedad;
                            //}
                            auditEntry.NewValues[propertyName] = convertirValor(property.CurrentValue);
                            auditEntry.OperationId = 1;
                            auditEntry.Operation = "Insert";
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = convertirValor(property.OriginalValue);
                            auditEntry.OperationId = 2;
                            auditEntry.Operation = "Deleted";
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = convertirValor(property.OriginalValue);
                                auditEntry.NewValues[propertyName] = convertirValor(property.CurrentValue);
                                auditEntry.OperationId = 3;
                                auditEntry.Operation = "Update";
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (AuditEntry auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                Audits.Add(auditEntry.ToAudit());
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;
            foreach (AuditEntry auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (PropertyEntry prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                Audits.Add(auditEntry.ToAudit());
            }

            return SaveChangesAsync();
        }

        public object convertirValor(object objeto)
        {
            object valor = objeto;
            if (objeto != null)
            {
                // Caso especial si el objeto es instancia de tipo Point de geography.
                if (objeto.GetType() == typeof(Point))
                {
                    Point punto = (Point)objeto;
                    valor = new { lat = punto.Y, lng = punto.X };
                }
            }
            return valor;
        }

        /* Modelos para la seguridad*/
        public DbSet<Audit> Audits { get; set; }
        public DbSet<AspNetUserRolesAudit> AspNetUserRolesAudit { get; set; }
        public DbSet<ApplicationUser> ApplicationUser { get; set; }
        public DbSet<ApplicationRole> ApplicationRole { get; set; }
        public DbSet<AspNetUserSessions> Sessions { get; set; }
        public DbSet<CatStatusAccount> CatStatusAccount { get; set; }
        public DbSet<AspNetProducts> AspNetProducts { get; set; }
        public DbSet<AspNetProductRoles> AspNetProductRoles { get; set; }

        /*Modelos para el menu*/
        public DbSet<AspNetMenu> AspNetMenu { get; set; }
        public DbSet<VW_Products> VW_Products { get; set; }

        /*Catálogos generales*/
        public DbSet<CatAutoridadCargoDetencion> CatAutoridadCargoDetencion { get; set; }       
        public DbSet<CatNacionalidad> CatNacionalidad { get; set; }      
        public DbSet<CatGenero> CatGenero { get; set; }
        public DbSet<CatDelito> CatDelito { get; set; }
        public DbSet<CatMotivoEgreso> CatMotivoEgreso { get; set; }
        public DbSet<CatSeparo> CatSeparo { get; set; }
        /*Transaccional.*/
        public DbSet<UsersAIC> UsersAIC { get; set; }
        public DbSet<UsuariosSeparos> UsuariosSeparos { get; set; }
        public DbSet<CatCorreo> CatCorreo { get; set; }
        public DbSet<ConfigCorreo> ConfigCorreo { get; set; }
        public DbSet<ConfigFtp> ConfigFtp { get; set; }
        public DbSet<VW_UsuariosRoles> VW_UsuariosRoles { get; set; }
     


    }
}